{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/video-display.js","webpack:///./src/pages/room.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Layout","children","to","loader","enqueue","React","createContext","VideoDisplay","roomID","useTwilioVideo","token","videoRef","activeRoom","startVideo","leaveRoom","useEffect","navigate","state","room","window","addEventListener","removeEventListener","className","onClick","ref","Room","path","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"2FAAA,+CAceA,IATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,oCACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,mBAEF,8BAAOD,M,kCCVX,iJAcyBE,QAAOC,QAELC,IAAMC,cAAc,K,kHCgChCC,EA5CM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAO/BC,cALFC,EAFiC,EAEjCA,MACAC,EAHiC,EAGjCA,SACAC,EAJiC,EAIjCA,WACAC,EALiC,EAKjCA,WACAC,EANiC,EAMjCA,UAyBF,OAtBAC,qBAAU,WAiBR,OAhBKP,GACHQ,YAAS,KAGNN,GACHM,YAAS,IAAK,CAAEC,MAAO,CAAEC,KAAMV,KAG5BI,GACHC,IAKFM,OAAOC,iBAAiB,eAAgBN,GAEjC,WACLK,OAAOE,oBAAoB,eAAgBP,MAE5C,CAACJ,EAAOF,EAAQI,EAAYC,EAAYC,IAGzC,oCACE,sCAAYN,EAAZ,KACCI,GACC,4BAAQU,UAAU,aAAaC,QAAST,GAAxC,cAIF,yBAAKQ,UAAU,OAAOE,IAAKb,MC9BlBc,UARF,kBACX,kBAAC,IAAD,KACE,kBAAC,SAAD,KACE,kBAAC,EAAD,CAAcC,KAAK,qB,qBCRzB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGE7B,IAAM8B,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-room-js-57b307e4a176772d9078.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './layout.css';\n\nconst Layout = ({ children }) => (\n  <>\n    <header>\n      <Link to=\"/\">Video Chat App</Link>\n    </header>\n    <main>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React, { useEffect } from 'react';\nimport { navigate } from 'gatsby';\nimport useTwilioVideo from '../hooks/use-twilio-video';\n\nconst VideoDisplay = ({ roomID }) => {\n  const {\n    token,\n    videoRef,\n    activeRoom,\n    startVideo,\n    leaveRoom,\n  } = useTwilioVideo();\n\n  useEffect(() => {\n    if (!roomID) {\n      navigate('/');\n    }\n\n    if (!token) {\n      navigate('/', { state: { room: roomID } });\n    }\n\n    if (!activeRoom) {\n      startVideo();\n    }\n\n    // Add a window listener to disconnect if the tab is closed. This works\n    // around a looooong lag before Twilio catches that the video is gone.\n    window.addEventListener('beforeunload', leaveRoom);\n\n    return () => {\n      window.removeEventListener('beforeunload', leaveRoom);\n    };\n  }, [token, roomID, activeRoom, startVideo, leaveRoom]);\n\n  return (\n    <>\n      <h1>Room: “{roomID}”</h1>\n      {activeRoom && (\n        <button className=\"leave-room\" onClick={leaveRoom}>\n          Leave Room\n        </button>\n      )}\n      <div className=\"chat\" ref={videoRef} />\n    </>\n  );\n};\n\nexport default VideoDisplay;\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport Layout from '../components/layout';\nimport VideoDisplay from '../components/video-display';\n\nconst Room = () => (\n  <Layout>\n    <Router>\n      <VideoDisplay path=\"room/:roomID\" />\n    </Router>\n  </Layout>\n);\n\nexport default Room;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}