{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/join.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Layout","children","to","Join","location","defaultRoom","state","room","useTwilioVideo","getParticipantToken","roomName","token","useState","identity","setIdentity","setRoom","useEffect","navigate","handleSubmit","event","a","preventDefault","onSubmit","className","htmlFor","type","id","value","onChange","e","target","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json"],"mappings":"2FAAA,+CAceA,IATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,oCACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,mBAEF,8BAAOD,M,sRCNX,IA8CeE,EA9CF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACRC,EAAeD,GAAYA,EAASE,OAASF,EAASE,MAAMC,MAAS,GAD9C,EAE0BC,cAA/CC,EAFqB,EAErBA,oBAA2BC,EAFN,EAEAH,KAAgBI,EAFhB,EAEgBA,MAFhB,EAGGC,mBAAS,IAAlCC,EAHsB,KAGZC,EAHY,OAILF,mBAASP,GAA1BE,EAJsB,KAIhBQ,EAJgB,KAM7BC,qBAAU,WACJL,GAASD,GACXO,YAAS,SAASP,KAEnB,CAACC,EAAOD,IAEX,IAAMQ,EAAY,e,EAAA,G,EAAA,UAAG,WAAMC,GAAN,SAAAC,EAAA,sDACnBD,EAAME,iBAENZ,EAAoB,CAAEI,WAAUN,SAHb,0C,+KAAH,sDAMlB,OACE,oCACE,0DACA,0BAAMe,SAAUJ,EAAcK,UAAU,cACtC,2BAAOC,QAAQ,YAAf,gBAEE,2BACEC,KAAK,OACLC,GAAG,WACHC,MAAOd,EACPe,SAAU,SAAAC,GAAC,OAAIf,EAAYe,EAAEC,OAAOH,WAGxC,2BAAOH,QAAQ,QAAf,kCAEE,2BACEC,KAAK,OACLC,GAAG,OACHC,MAAOpB,EACPqB,SAAU,SAAAC,GAAC,OAAId,EAAQc,EAAEC,OAAOH,WAGpC,4BAAQF,KAAK,UAAb,sBCxCO,0BAAGrB,EAAH,EAAGA,SAAH,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMA,SAAUA,O,kCCNpB,iJAcyB2B,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BpC,EAA8B,EAA9BA,SAAUqC,EAAoB,EAApBA,cACpC,OAAKA,EAGER,IAAMS,cAAcC,IAApB,eACLvC,WACAqC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-d4eb126dc2f5f2454b07.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './layout.css';\n\nconst Layout = ({ children }) => (\n  <>\n    <header>\n      <Link to=\"/\">Video Chat App</Link>\n    </header>\n    <main>{children}</main>\n  </>\n);\n\nexport default Layout;\n","import React, { useState, useEffect } from 'react';\nimport useTwilioVideo from '../hooks/use-twilio-video';\nimport { navigate } from 'gatsby';\n\nconst Join = ({ location }) => {\n  const defaultRoom = (location && location.state && location.state.room) || '';\n  const { getParticipantToken, room: roomName, token } = useTwilioVideo();\n  const [identity, setIdentity] = useState('');\n  const [room, setRoom] = useState(defaultRoom);\n\n  useEffect(() => {\n    if (token && roomName) {\n      navigate(`/room/${roomName}`);\n    }\n  }, [token, roomName]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    getParticipantToken({ identity, room });\n  };\n\n  return (\n    <>\n      <h1>Start or Join a Video Chat</h1>\n      <form onSubmit={handleSubmit} className=\"start-form\">\n        <label htmlFor=\"identity\">\n          Display name:\n          <input\n            type=\"text\"\n            id=\"identity\"\n            value={identity}\n            onChange={e => setIdentity(e.target.value)}\n          />\n        </label>\n        <label htmlFor=\"room\">\n          Which room do you want to join?\n          <input\n            type=\"text\"\n            id=\"room\"\n            value={room}\n            onChange={e => setRoom(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Join Video Chat</button>\n      </form>\n    </>\n  );\n};\n\nexport default Join;\n","import React from 'react';\nimport Layout from '../components/layout';\nimport Join from '../components/join';\n\nexport default ({ location }) => (\n  <Layout>\n    <Join location={location} />\n  </Layout>\n);\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}